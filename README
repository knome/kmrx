 
 This is just an experimental regex engine.
 
 I use a python script to generate a C-based switch
 statement, header or grep-ish source, which can then
 be compiled by gcc or clang into a binary.
 
 This engine does not have many features of other
 regex engines, such as capturing groups and some
 advanced forms.
 
 While running, the regex uses a fixed amount of
 space for the state information, usually just a
 single 64 bit integer.
 
 Properly keeping track of parsing and storing
 the data to pass through the __step function are
 left as expercises for a later day.
 
 Experimental examples can be generated, however.
 
 - - - - -
 
 Usage
 
 ./tools/test 'the regex to compile'
 ./tools/test 'the regex to compile' "$OPTLEVEL"
 CC=clang ./tools/test 'the regex to compile'
 
 ./bld/rx path/to/file      # mmap variant
 ./bld/rx path/to/file read # read() variant
 ./bld/rx                   # stdin variant
 
 Running the generated `rx` ought to print out the
 matching lines ( use .*hello.* to match anywhere
 on a line, for the moment )
 
 I haven't been testing the stdin variant, the other
 two should work, though. Or at least not fall over.
 
 - - - - -
 
 Example Runs ( slightly edited for presentation )
    
    start 139772779831080
    stop 139772779831192
    
    [<Node 0 1>, <Node 1 1>, <Node 2 1>, <Node 3 1>, <Node 4 1>, <Node 5 0>]
    
    ends [5]
    
    ctriggers {'o': [(4, 5)], 'l': [(2, 3), (3, 4)], 'h': [(0, 1)], 'e': [(1, 2)]}
    utriggers []
    
    cmrCTriggers {'o': [(0, 4, 1, 0)], 'l': [(0, 2, 1, 0), (0, 3, 1, 0)], 'h': [(0, 0, 1, 0)], 'e': [(0, 1, 1, 0)]}
    cmrUTriggers []
    
    fcmrCTriggers {'o': [(0, 4, 1, 0)], 'l': [(0, 2, 1, 0), (0, 3, 1, 0)], 'h': [(0, 0, 1, 0)], 'e': [(0, 1, 1, 0)]}
    cmrUTriggers []
    
    mcc {'o': {(0, 1, 0): [4]}, 'l': {(0, 1, 0): [2, 3]}, 'h': {(0, 1, 0): [0]}, 'e': {(0, 1, 0): [1]}}
    mcu {}
    
    cmcc {(((0, 1, 0), (2, 3)),): ['l'], (((0, 1, 0), (4,)),): ['o'], (((0, 1, 0), (1,)),): ['e'], (((0, 1, 0), (0,)),): ['h']}
    mcu {}
    
    139772779831080
    ... <MatchChar 'h'> 139772779814984
    139772779814984
    ... <MatchChar 'e'> 139772779815040
    139772779815040
    ... <MatchChar 'l'> 139772779815096
    139772779815096
    ... <MatchChar 'l'> 139772779815152
    139772779815152
    ... <MatchChar 'o'> 139772779831136
    139772779831136
    ... True 139772779831192
    139772779831192
    
    139772779831080
    ... <MatchChar 'h'> 139772779814984
    139772779814984
    ... <MatchChar 'e'> 139772779815040
    139772779815040
    ... <MatchChar 'l'> 139772779815096
    139772779815096
    ... <MatchChar 'l'> 139772779815152
    139772779815152
    ... <MatchChar 'o'> 139772779831136
    139772779831136
    
    switch( cc ){
      // 'l'
      case '\x6c': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0xcull) << 1 ); // (2,3), (3,4)
        break;
    
      }
      // 'o'
      case '\x6f': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x10ull) << 1 ); // (4,5)
        break;
    
      }
      // 'e'
      case '\x65': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x2ull) << 1 ); // (1,2)
        break;
    
      }
      // 'h'
      case '\x68': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x1ull) << 1 ); // (0,1)
        break;
    
      }
      default:{
        chunks[ 0 ] = 0 ;
        break;
      }
    }

- - - - -

And a more complex example


    start 139744876331752
    stop 139744876331864
    
    
    [<Node 0 3>, <Node 1 1>, <Node 2 1>, <Node 3 1>, <Node 4 1>, <Node 5 1>, <Node 6 1>, <Node 7 1>, <Node 8 1>, <Node 9 1>, <Node 10 1>, <Node 11 1>, <Node 12 2>, <Node 13 1>, <Node 14 1>, <Node 15 1>, <Node 16 1>, <Node 17 1>, <Node 18 1>, <Node 19 1>]
    
    ends [18, 19]

    ctriggers {'6': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], ')': [(8, 10)], '8': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '-': [(5, 7), (13, 14)], '\t': [(10, 12), (12, 12)], '9': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '\x0c': [(10, 12), (12, 12)], '\x0b': [(10, 12), (12, 12)], '\n': [(10, 12), (12, 12)], '1': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '3': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '5': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '\r': [(10, 12), (12, 12)], '2': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '7': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '(': [(0, 2)], ' ': [(10, 12), (12, 12)], '4': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)], '0': [(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (6, 8), (7, 9), (9, 11), (11, 13), (12, 9), (14, 15), (15, 16), (16, 17), (17, 18)]}
utriggers [(0, 0), (18, 19), (19, 19)]

    cmrCTriggers {'6': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], ')': [(0, 8, 2, 0)], '8': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], '\x0c': [(0, 10, 2, 0), (0, 12, 0, 0)], '\t': [(0, 10, 2, 0), (0, 12, 0, 0)], '9': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], '(': [(0, 0, 2, 0)], '\x0b': [(0, 10, 2, 0), (0, 12, 0, 0)], '\n': [(0, 10, 2, 0), (0, 12, 0, 0)], '1': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], '3': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], '5': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], '\r': [(0, 10, 2, 0), (0, 12, 0, 0)], '-': [(0, 5, 2, 0), (0, 13, 1, 0)], '7': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], '2': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], ' ': [(0, 10, 2, 0), (0, 12, 0, 0)], '4': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)], '0': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0)]}
cmrUTriggers [(0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)]

xefcmrCTriggers {'6': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '2': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], ')': [(0, 8, 2, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '8': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '\x0c': [(0, 10, 2, 0), (0, 12, 0, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '\t': [(0, 10, 2, 0), (0, 12, 0, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '9': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '\x0b': [(0, 10, 2, 0), (0, 12, 0, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '\n': [(0, 10, 2, 0), (0, 12, 0, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '1': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '3': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '5': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '\r': [(0, 10, 2, 0), (0, 12, 0, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '-': [(0, 5, 2, 0), (0, 13, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '7': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '(': [(0, 0, 2, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], ' ': [(0, 10, 2, 0), (0, 12, 0, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '4': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)], '0': [(0, 0, 1, 0), (0, 1, 2, 0), (0, 2, 2, 0), (0, 3, 2, 0), (0, 4, 2, 0), (0, 6, 2, 0), (0, 7, 2, 0), (0, 9, 2, 0), (0, 11, 2, 0), (0, 12, -3, 0), (0, 14, 1, 0), (0, 15, 1, 0), (0, 16, 1, 0), (0, 17, 1, 0), (0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)]}
cmrUTriggers [(0, 0, 0, 0), (0, 18, 1, 0), (0, 19, 0, 0)]

    mcc {'6': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, ')': {(0, 2, 0): [8], (0, 1, 0): [18], (0, 0, 0): [0, 19]}, '8': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, '\x0c': {(0, 2, 0): [10], (0, 1, 0): [18], (0, 0, 0): [12, 0, 19]}, '\t': {(0, 2, 0): [10], (0, 1, 0): [18], (0, 0, 0): [12, 0, 19]}, '9': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, '(': {(0, 2, 0): [0], (0, 1, 0): [18], (0, 0, 0): [0, 19]}, '\x0b': {(0, 2, 0): [10], (0, 1, 0): [18], (0, 0, 0): [12, 0, 19]}, '\n': {(0, 2, 0): [10], (0, 1, 0): [18], (0, 0, 0): [12, 0, 19]}, '1': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, '3': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, '5': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, '\r': {(0, 2, 0): [10], (0, 1, 0): [18], (0, 0, 0): [12, 0, 19]}, '-': {(0, 2, 0): [5], (0, 1, 0): [13, 18], (0, 0, 0): [0, 19]}, '7': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, '2': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, ' ': {(0, 2, 0): [10], (0, 1, 0): [18], (0, 0, 0): [12, 0, 19]}, '4': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}, '0': {(0, 2, 0): [1, 2, 3, 4, 6, 7, 9, 11], (0, 1, 0): [0, 14, 15, 16, 17, 18], (0, 0, 0): [0, 19], (0, -3, 0): [12]}}
mcu {(0, 1, 0): [18], (0, 0, 0): [0, 19]}

    cmcc {(((0, 0, 0), (0, 12, 19)), ((0, 1, 0), (18,)), ((0, 2, 0), (10,))): ['\x0c', '\t', '\x0b', '\n', '\r', ' '], (((0, -3, 0), (12,)), ((0, 0, 0), (0, 19)), ((0, 1, 0), (0, 14, 15, 16, 17, 18)), ((0, 2, 0), (1, 2, 3, 4, 6, 7, 9, 11))): ['6', '8', '9', '1', '3', '5', '7', '2', '4', '0'], (((0, 0, 0), (0, 19)), ((0, 1, 0), (13, 18)), ((0, 2, 0), (5,))): ['-'], (((0, 0, 0), (0, 19)), ((0, 1, 0), (18,)), ((0, 2, 0), (0,))): ['('], (((0, 0, 0), (0, 19)), ((0, 1, 0), (18,)), ((0, 2, 0), (8,))): [')']}

    mcu {(0, 1, 0): [18], (0, 0, 0): [0, 19]}

    139744876331752
    ... <MatchDot> 139744876331752
    ... None 139744876331976
    139744876331976
    ... <MatchDigit> 139744876346056
    ... <MatchChar '('> 139744876346112
    139744876346056
    ... <MatchDigit> 139744876346280
    139744876346112
    ... <MatchDigit> 139744876346504
    139744876346280
    ... <MatchDigit> 139744876346224
    139744876346504
    ... <MatchDigit> 139744876346560
    139744876346224
    ... None 139744876345776
    139744876346560
    ... <MatchDigit> 139744876346392
    139744876345776
    ... <MatchChar '-'> 139744876332032
    139744876346392
    ... None 139744876346448
    139744876332032
    ... <MatchDigit> 139744876332312
    139744876346448
    ... <MatchChar ')'> 139744876346336
    139744876332312
    ... <MatchDigit> 139744876332368
    139744876346336
    ... <MatchWhitespace> 139744876332144
    139744876332368
    ... <MatchDigit> 139744876332424
    139744876332144
    ... None 139744876332032
    ... None 139744876346336
    139744876332424
    ... None 139744876332256
    139744876332256
    ... <MatchChar '-'> 139744876332480
    139744876332480
    ... <MatchDigit> 139744876332536
    139744876332536
    ... <MatchDigit> 139744876332592
    139744876332592
    ... <MatchDigit> 139744876332648
    139744876332648
    ... <MatchDigit> 139744876332704
    139744876332704
    ... None 139744876332088
    139744876332088
    ... <MatchDot> 139744876332088
    ... None 139744876331808
    139744876331808
    ... True 139744876331864
    139744876331864
    
    139744876331752
    ... <MatchDot> 139744876331752
    ... <MatchDigit> 139744876346056
    ... <MatchChar '('> 139744876346112
    139744876346056
    ... <MatchDigit> 139744876346280
    139744876346112
    ... <MatchDigit> 139744876346504
    139744876346280
    ... <MatchDigit> 139744876346224
    139744876346504
    ... <MatchDigit> 139744876346560
    139744876346224
    ... <MatchChar '-'> 139744876332032
    139744876346560
    ... <MatchDigit> 139744876346392
    139744876332032
    ... <MatchDigit> 139744876332312
    139744876346392
    ... <MatchChar ')'> 139744876346336
    139744876332312
    ... <MatchDigit> 139744876332368
    139744876346336
    ... <MatchWhitespace> 139744876332144
    139744876332368
    ... <MatchDigit> 139744876332424
    139744876332144
    ... <MatchDigit> 139744876332312
    ... <MatchWhitespace> 139744876332144
    139744876332424
    ... <MatchChar '-'> 139744876332480
    139744876332480
    ... <MatchDigit> 139744876332536
    139744876332536
    ... <MatchDigit> 139744876332592
    139744876332592
    ... <MatchDigit> 139744876332648
    139744876332648
    ... <MatchDigit> 139744876332704
    139744876332704
    ... <MatchDot> 139744876332088
    139744876332088
    ... <MatchDot> 139744876332088
    
    switch( cc ){
      // '\t' '\n' '\x0b' '\x0c' '\r' ' '
      case '\x09':  case '\x0a':  case '\x0b':  case '\x0c':  case '\x0d':  case '\x20': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x81001ull) << 0 ); // (0,0), (12,12), (19,19)
        chunks[ 0 ] |= ( (prev_0 & 0x40000ull) << 1 ); // (18,19)
        chunks[ 0 ] |= ( (prev_0 & 0x400ull) << 2 ); // (10,12)
        break;
    
      }
      // '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'
      case '\x30':  case '\x31':  case '\x32':  case '\x33':  case '\x34':  case '\x35':  case '\x36':  case '\x37':  case '\x38':  case '\x39': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x1000ull) >> 3 ); // (12,9)
        chunks[ 0 ] |= ( (prev_0 & 0x80001ull) << 0 ); // (0,0), (19,19)
        chunks[ 0 ] |= ( (prev_0 & 0x7c001ull) << 1 ); // (0,1), (14,15), (15,16), (16,17), (17,18), (18,19)
        chunks[ 0 ] |= ( (prev_0 & 0xadeull) << 2 ); // (1,3), (2,4), (3,5), (4,6), (6,8), (7,9), (9,11), (11,13)
        break;
    
      }
      // '-'
      case '\x2d': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x80001ull) << 0 ); // (0,0), (19,19)
        chunks[ 0 ] |= ( (prev_0 & 0x42000ull) << 1 ); // (13,14), (18,19)
        chunks[ 0 ] |= ( (prev_0 & 0x20ull) << 2 ); // (5,7)
        break;
    
      }
      // '('
      case '\x28': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x80001ull) << 0 ); // (0,0), (19,19)
        chunks[ 0 ] |= ( (prev_0 & 0x40000ull) << 1 ); // (18,19)
        chunks[ 0 ] |= ( (prev_0 & 0x1ull) << 2 ); // (0,2)
        break;
    
      }
      // ')'
      case '\x29': {
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x80001ull) << 0 ); // (0,0), (19,19)
        chunks[ 0 ] |= ( (prev_0 & 0x40000ull) << 1 ); // (18,19)
        chunks[ 0 ] |= ( (prev_0 & 0x100ull) << 2 ); // (8,10)
        break;
    
      }
      default:{
        uint64_t prev_0 = chunks[ 0 ];
        chunks[ 0 ] = 0 ;
        chunks[ 0 ] |= ( (prev_0 & 0x40000ull) << 1 ); // (18,19)
        chunks[ 0 ] |= ( (prev_0 & 0x80001ull) << 0 ); // (0,0), (19,19)
        break;
      }
    }
